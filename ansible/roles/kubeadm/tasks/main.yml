# https://microk8s.io/#install-microk8s
# https://stackoverflow.com/questions/33222641/override-hosts-variable-of-ansible-playbook-from-the-command-line

# Load modules required by kubeadm
- name: enable br_netfilter module
  ansible.builtin.lineinfile:
    path: /etc/modules
    regexp: '(^br_netfilter$)'
    line: 'br_netfilter'
- name: reboot and await restart
  ansible.builtin.reboot:

# Address sysctl settings required by kubeadm init
- name: enable net.bridge.bridge-nf-call-iptables via sysctl
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
- name: enable net.ipv4.ip_forward via sysctl
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true

# Create downloads area
- name: create temporary downloads directory
  ansible.builtin.tempfile:
    state: directory
    suffix: kubeadm
  register: kubeadm_downloads
- name: download containerd 1.6.19
  ansible.builtin.get_url:
    timeout: 60
    url: https://github.com/containerd/containerd/releases/download/v1.6.19/containerd-1.6.19-linux-arm64.tar.gz
    dest: '{{ kubeadm_downloads.path }}/containerd-1.6.19-linux-arm64.tar.gz'
- name: download cni-plugins 1.2.0
  ansible.builtin.get_url:
    timeout: 60
    url: https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-arm64-v1.2.0.tgz
    dest: '{{ kubeadm_downloads.path }}/cni-plugins-linux-arm64-v1.2.0.tgz'

# Install containerd
- name: install containerd 1.6.19
  ansible.builtin.unarchive:
    src: '{{ kubeadm_downloads.path }}/containerd-1.6.19-linux-arm64.tar.gz'
    dest: /usr/local
    copy: false
- name: create /usr/local/lib/systemd/system directory
  ansible.builtin.file:
    path: /usr/local/lib/systemd/system
    state: directory
    recurse: true
    mode: '0755'
- name: install containerd.service unit file
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /usr/local/lib/systemd/system/containerd.service
    mode: '0644'
- name: reload-daemon and enable containerd service
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: yes
    daemon_reload: yes

# Install runc
- name: install runc 1.1.4
  ansible.builtin.get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.arm64
    dest: /usr/local/sbin/runc
    mode: '0755'

# Install cni-plugins
- name: create /opt/cni/bin directory
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    recurse: true
    mode: '0755'
- name: install cni-plugins 1.2.0
  ansible.builtin.unarchive:
    src: '{{ kubeadm_downloads.path }}/cni-plugins-linux-arm64-v1.2.0.tgz'
    dest: /opt/cni/bin
    copy: false

# Clean up downloads area
- name: delete temporary downloads directory
  ansible.builtin.file:
    state: absent
    path: '{{ kubeadm_downloads.path }}'

# Configure containerd for systemd cgroup
- name: create /etc/containerd directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    recurse: yes
    mode: '0755'
- name: capture containerd default configuration
  shell: containerd config default
  register: config_toml
- name: write containerd config to /etc/containerd/config.toml
  copy:
    content: '{{ config_toml.stdout }}'
    dest: /etc/containerd/config.toml
- name: configure systemd cgroup for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '\.*SystemdCgroup'
    line: '            SystemdCgroup = true'

# Install kubeadm dependencies
- name: run apt update
  ansible.builtin.apt:
    update_cache: true
- name: run apt upgrade
  ansible.builtin.apt:
    upgrade: true
- name: run apt install ethtool socat conntrack
  ansible.builtin.apt:
    pkg:
    - ethtool
    - socat
    - conntrack

# Install kubeadm kubelet kubectl
- name: create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    recurse: yes
    mode: '0755'
- name: download google cloud public signing key
  ansible.builtin.get_url:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    mode: '0644'
- name: add kubernetes apt repository
  copy:
    content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main'
    dest: /etc/apt/sources.list.d/kubernetes.list
- name: run apt update
  ansible.builtin.apt:
    update_cache: true
- name: run apt install kubelet kubeadm kubectl
  ansible.builtin.apt:
    pkg:
    - kubelet
    - kubeadm
    - kubectl
- name: hold kubelet
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold
- name: hold kubeadm
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold
- name: hold kubectl
  ansible.builtin.dpkg_selections:
    name: kubectl
    selection: hold

# Allow swap when starting kubeadm
- name: create allow-swap file for kubelet
  ansible.builtin.template:
    dest: /etc/systemd/system/kubelet.service.d/20-allow-swap.conf
    src: 20-allow-swap.conf.j2
- name: reload daemon and restart kubelet service
  ansible.builtin.systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
